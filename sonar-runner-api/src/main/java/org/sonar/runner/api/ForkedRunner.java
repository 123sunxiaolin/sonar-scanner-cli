/*
 * Sonar Runner - API
 * Copyright (C) 2011 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonar.runner.api;

import org.apache.commons.io.IOUtils;
import org.sonar.runner.impl.BatchLauncherMain;
import org.sonar.runner.impl.JarExtractor;

import javax.annotation.Nullable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.*;

public class ForkedRunner extends Runner<ForkedRunner> {

  private static final int ONE_DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000;

  private final Map<String, String> jvmEnvVariables = new HashMap<String, String>();
  private final List<String> jvmArguments = new ArrayList<String>();
  private String javaCommand;

  private final JarExtractor jarExtractor;

  ForkedRunner(JarExtractor jarExtractor) {
    this.jarExtractor = jarExtractor;
  }

  public static ForkedRunner create() {
    return new ForkedRunner(new JarExtractor());
  }

  public ForkedRunner setJavaCommand(@Nullable String s) {
    this.javaCommand = s;
    return this;
  }

  public ForkedRunner addJvmArguments(String... s) {
    return addJvmArguments(Arrays.asList(s));
  }

  public ForkedRunner addJvmArguments(List<String> args) {
    jvmArguments.addAll(args);
    return this;
  }

  public ForkedRunner setJvmEnvVariable(String key, String value) {
    jvmEnvVariables.put(key, value);
    return this;
  }

  public ForkedRunner addJvmEnvVariables(Map<String, String> map) {
    jvmEnvVariables.putAll(map);
    return this;
  }

  @Override
  protected void doExecute() {
    fork(createCommand());
  }

  Command createCommand() {
    File propertiesFile = writeProperties();
    File jarFile = jarExtractor.extract("sonar-runner-impl");

    Os os = new Os();
    if (javaCommand == null) {
      javaCommand = os.usedJavaExe().getAbsolutePath();
    }
    return Command.builder()
        .setExecutable(javaCommand)
        .addArguments(jvmArguments)
        .addArguments("-cp", jarFile.getAbsolutePath(), BatchLauncherMain.class.getName(), propertiesFile.getAbsolutePath())
        .build();
  }

  private File writeProperties() {
    OutputStream output = null;
    try {
      File file = File.createTempFile("sonar-project", ".properties");
      output = new FileOutputStream(file);
      properties().store(output, "Generated by sonar-runner");
      return file;

    } catch (Exception e) {
      throw new IllegalStateException("Fail to export sonar-runner properties", e);

    } finally {
      IOUtils.closeQuietly(output);
    }
  }

  private void fork(Command command) {
    int status = CommandExecutor.create().execute(command, ONE_DAY_IN_MILLISECONDS);
    if (status != 0) {
      throw new IllegalStateException("TODO");
    }
  }
}
