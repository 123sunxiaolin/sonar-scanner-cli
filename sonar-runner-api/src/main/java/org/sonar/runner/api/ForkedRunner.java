/*
 * Sonar Runner - API
 * Copyright (C) 2011 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonar.runner.api;

import org.apache.commons.io.IOUtils;
import org.sonar.runner.impl.BatchLauncherMain;
import org.sonar.runner.impl.JarExtractor;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class ForkedRunner extends Runner<ForkedRunner> {

  private static final int ONE_DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000;

  private final Command.Builder commandBuilder;
  private final JarExtractor jarExtractor;

  ForkedRunner(Command.Builder commandBuilder, JarExtractor jarExtractor) {
    this.commandBuilder = commandBuilder;
    this.jarExtractor = jarExtractor;
  }

  public static ForkedRunner create() {
    Os os = new Os();
    Command.Builder builder = Command.builder().setExecutable(os.usedJavaExe().getAbsolutePath());
    return new ForkedRunner(builder, new JarExtractor());
  }

  @Override
  public void doExecute() {
    File propertiesFile = writeProperties();
    File jarFile = extractJar();
    fork(jarFile, propertiesFile);
  }

  private File extractJar() {
    return jarExtractor.extract("sonar-runner-impl");
  }

  private void fork(File jarFile, File propertiesFile) {
    // java -jar sonar-runner-impl.jar path/to/propertiesFile
    Command command = commandBuilder
      .addArguments("-cp", jarFile.getAbsolutePath())
      .addArguments(BatchLauncherMain.class.getName())
      .addArguments(propertiesFile.getAbsolutePath())
      .build();
    System.out.println("---------- execute: " + command);
    int status = CommandExecutor.create().execute(command, ONE_DAY_IN_MILLISECONDS);
    if (status != 0) {
      throw new IllegalStateException("TODO");
    }
  }

  private File writeProperties() {
    OutputStream output = null;
    try {
      File file = File.createTempFile("sonar-project", ".properties");
      output = new FileOutputStream(file);
      properties().store(output, "Generated by sonar-runner");
      return file;

    } catch (Exception e) {
      throw new IllegalStateException("Fail to export sonar-runner properties", e);

    } finally {
      IOUtils.closeQuietly(output);
    }
  }

  public ForkedRunner setJavaCommand(String s) {
    commandBuilder.setExecutable(s);
    return this;
  }

  public ForkedRunner addJvmArgument(String... s) {
    commandBuilder.addArguments(Arrays.asList(s));
    return this;
  }

  public ForkedRunner addJvmArguments(List<String> args) {
    commandBuilder.addArguments(args);
    return this;
  }

  public ForkedRunner setJvmEnvVariable(String key, String value) {
    commandBuilder.setEnvVariable(key, value);
    return this;
  }

  public ForkedRunner addJvmEnvVariables(Map<String, String> map) {
    commandBuilder.addEnvVariables(map);
    return this;
  }


}
